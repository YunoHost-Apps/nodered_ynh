#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
#REMOVEME? ynh_script_progression --message="Loading installation settings..." --weight=1

#REMOVEME? app=$YNH_APP_INSTANCE_NAME

#REMOVEME? domain=$(ynh_app_setting_get --app=$app --key=domain)
#REMOVEME? path=$(ynh_app_setting_get --app=$app --key=path)
#REMOVEME? #REMOVEME? install_dir=$(ynh_app_setting_get --app=$app --key=install_dir)
#REMOVEME? port=$(ynh_app_setting_get --app=$app --key=port)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
#REMOVEME? ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --weight=5

# Backup the current version of the app
#REMOVEME? ynh_backup_before_upgrade
#REMOVEME? ynh_clean_setup () {
	# Restore it if the upgrade fails
#REMOVEME? 	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
#REMOVEME? ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action="stop"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If install_dir doesn't exist, create it
if [ -z "$install_dir" ]; then
#REMOVEME? 	install_dir=/var/www/$app
#REMOVEME? 	ynh_app_setting_set --app=$app --key=install_dir --value=$install_dir
fi

# Cleaning legacy permissions
#REMOVEME? if ynh_legacy_permissions_exists; then
#REMOVEME? 	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

# After 1.3.5~ynh2, permissions have been reworked
#REMOVEME? if ynh_permission_exists --permission="admin"; then
	# Delete the admin permission
	ynh_permission_delete --permission="admin"
	# We use main as admin permission
        ynh_permission_url --permission="main" --url="/admin"
fi

#REMOVEME? if ! ynh_permission_exists --permission="ui"; then
	# Create ui permission, for the dashboard
#REMOVEME? 	ynh_permission_create --permission="ui" --url="/ui" --show_tile=true
fi

#REMOVEME? if ! ynh_permission_exists --permission="endpoints"; then
	# Create endpoints permission
#REMOVEME? 	ynh_permission_create --permission="endpoints" --url="/" --show_tile=false
fi

# Transfer the publicness of the app to ui and endpoints
if ynh_permission_has_user --permission=main --user=visitors; then
#REMOVEME? 	ynh_permission_update --permission="ui" --add="visitors"
#REMOVEME? 	ynh_permission_update --permission="endpoints" --add="visitors"
	# Remove visitor access to the admin panel
#REMOVEME? 	ynh_permission_update --permission="main" --remove="visitors"
fi

# Flows were stored in file named after the hostname.
# Not very portable. Let's fix that.
if [[ ! -f "$install_dir/data/flows.json" && -f "$install_dir/data/flows_$(hostname).json" ]]; then
	mv "$install_dir/data/flows_$(hostname)_cred.json" "$install_dir/data/flows_cred.json"
	mv "$install_dir/data/flows_$(hostname).json" "$install_dir/data/flows.json"
# Flows could be stored in a file named '>>'.
# Definitely weird, let's fix that.
elif [[ ! -f "$install_dir/data/flows.json" && -f "$install_dir/data/>>" ]]; then
	mv "$install_dir/data/>>_cred" "$install_dir/data/flows_cred.json"
	mv "$install_dir/data/>>" "$install_dir/data/flows.json"
fi

# Remove logrotate and log directory, we use syslog now
if [[ -d "/etc/logrotate.d/$app" ]]; then
	ynh_remove_logrotate
	ynh_secure_remove --file="/var/log/$app"
fi

# In older versions of the package, the port serving the webui was opened to anyone,
# allowing direct access to Node-RED... let's close it.
if yunohost firewall list | grep -q "\- $port$"
then
        ynh_script_progression --message="Closing port $port..." --weight=1
        ynh_exec_warn_less yunohost firewall disallow TCP $port
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
#REMOVEME? ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
#REMOVEME? ynh_system_user_create --username=$app --home_dir=$install_dir

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=2

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$install_dir"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=1

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
#REMOVEME? ynh_script_progression --message="Upgrading dependencies..."

#REMOVEME? if [ $(ynh_app_setting_get --app=$app --key=nodejs_version) != $nodejs_version ]; then
	ynh_remove_nodejs
	ynh_install_nodejs --nodejs_version=$nodejs_version
fi

#=================================================
# SPECIFIC UPGRADE
#=================================================
# Install through npm
#=================================================
ynh_script_progression --message="Installing Node-RED..." --weight=5

ynh_use_nodejs

chown -R $app: "$install_dir"

pushd $install_dir
        ynh_exec_warn_less ynh_exec_as $app $ynh_node_load_PATH $ynh_npm install --production
        ynh_exec_warn_less ynh_exec_as $app $ynh_node_load_PATH $ynh_npm install node-red-dashboard
popd

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a configuration file..."

# Set up the settings file
ynh_add_config --template="../conf/settings.js" --destination="$install_dir/data/settings.js"
if [[ ! -f "$install_dir/data/settings.user.js" ]] ; then
    ynh_add_config --template="../conf/settings.user.js" --destination="$install_dir/data/settings.user.js"
fi

# Small hack to have the "/" path answer with a 200 code to satisfy the CI
if [[ "${PACKAGE_CHECK_EXEC:-}" = "1" ]] ; then
    ynh_add_config --template="../conf/flows.json" --destination="$install_dir/data/flows.json"
fi

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..." --weight=1

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R $app: "$install_dir"
# make settings.js readonly
chmod a-w "$install_dir/data/settings.js"

#=================================================
# GENERIC FINALIZATION
#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."

yunohost service add $app --description="Low-code programming for event-driven applications"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=3

ynh_systemd_action --service_name=$app --action="start"

#=================================================
# RELOAD NGINX
#=================================================
#REMOVEME? ynh_script_progression --message="Reloading NGINX web server..." --weight=1

#REMOVEME? ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
